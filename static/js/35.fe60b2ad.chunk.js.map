{"version":3,"file":"static/js/35.fe60b2ad.chunk.js","mappings":"gQAYA,EAXoB,SAAC,GAAgB,IAAdA,EAAa,EAAbA,OACrB,OACE,wBACGA,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,KAAvB,OACV,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAkBC,GAA/B,SAAwCD,GAAkBC,KADnDF,EADC,KAOjB,E,2BCTYI,EAAaC,EAAAA,EAAAA,MAAH,+LAWVC,EAAYD,EAAAA,EAAAA,KAAH,uGCuBtB,EAhCmB,SAAC,GAAyB,IAAvBE,EAAsB,EAAtBA,gBACpB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAeA,OACE,UAACJ,EAAD,CAAWK,SAfQ,SAAAC,GACnBA,EAAEC,iBACFN,EAAgB,CAAEE,MAAAA,IAClBC,EAAS,GACV,EAWC,WACE,SAACN,EAAD,CACEU,KAAK,OACLC,YAAY,kBACZC,MAAOP,EACPQ,aAAa,MACbC,SAhBoB,SAAAC,GAExB,GADAC,QAAQC,IAAIF,EAAIG,OAAON,OACE,KAArBG,EAAIG,OAAON,MACb,OAAOT,EAAgB,CAAC,GAE1BG,EAASS,EAAIG,OAAON,MAAMO,eAC1BhB,EAAgB,CAAEiB,aAAcL,EAAIG,OAAON,OAC5C,KAWG,mBAAQF,KAAK,SAASW,UAAWhB,EAAjC,UACE,SAAC,MAAD,CAAUiB,MAAO,CAAEC,MAAO,GAAIC,OAAQ,UAI7C,ECsBD,EApDe,WAAO,IAAD,EACnB,GAA4BpB,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAe+B,EAAf,KACA,GAA0BrB,EAAAA,EAAAA,UAAS,MAAnC,eAAOsB,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqB1B,EAArB,KAEMiB,EAAY,UAAGS,EAAaC,IAAI,gBAApB,QAAgC,IAC5CC,GAAWC,EAAAA,EAAAA,MACjBhB,QAAQC,IAAI,CAAEG,aAAAA,KAEda,EAAAA,EAAAA,YAAU,WACR,IAEMC,EAAS,mCAAG,oGACMC,MAAM,GAAD,OAHZ,gCAGY,gCAFb,mCAEa,mBAC4Bf,EAD5B,+CADX,WACVgB,EADU,QAIHC,GAJG,sBAKR,IAAIC,MAAM,mBALF,gCAOTF,EAAQG,QAPC,2CAAH,qDAUTC,EAAW,mCAAG,6GAEGN,EAAUd,GAFb,UAEVqB,EAFU,OAGhBzB,QAAQC,IAAIwB,EAAKL,SACW,IAAxBK,EAAKL,QAAQM,OAJD,sBAKRJ,MAAM,oBALE,OAOhBb,EAAUgB,EAAKL,SAPC,kDAShBT,EAAS,KAAMgB,SATC,0DAAH,qDAajBH,GACD,GAAE,CAACpB,IAEJJ,QAAQC,IAAIS,GACZV,QAAQC,IAAIvB,GACZ,IAAMkD,EAAelD,EAAOmD,QAAO,SAAAC,GAAK,OACtCA,EAAMjD,eAAekD,SAAS3B,EADQ,IAKxC,OAFAJ,QAAQC,IAAI2B,GACZ5B,QAAQC,IAAIc,IAEV,4BACE,SAAC,EAAD,CAAY5B,gBAAiBA,KAC7B,SAAC,EAAD,CAAaT,OAAQA,MAG1B,C","sources":["components/SearchMovie/SearchMovie.jsx","components/MoviesForm/MoviesForm.styled.jsx","components/MoviesForm/MoviesForm.jsx","pages/Movies.jsx"],"sourcesContent":["import { Link } from 'react-router-dom';\nconst SearchMovie = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(({ id, original_title, name }) => (\n        <li key={id}>\n          <Link to={`${original_title || name}`}>{original_title || name}</Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default SearchMovie;\n","import styled from '@emotion/styled';\n\nexport const MovieInput = styled.input`\n  display: inline-block;\n  width: 200px;\n  height: 27px;\n\n  margin-left: 40px;\n  font: inherit;\n  font-size: 14px;\n  padding-left: 4px;\n  padding-right: 4px;\n`;\nexport const MovieForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin-top: 20px;\n`;\n","import { useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport { MovieInput, MovieForm } from './MoviesForm.styled';\n\nconst MoviesForm = ({ setSearchParams }) => {\n  const [query, setQuery] = useState('');\n  const handelSubmit = e => {\n    e.preventDefault();\n    setSearchParams({ query });\n    setQuery('');\n  };\n  const updateQueryString = evt => {\n    console.log(evt.target.value);\n    if (evt.target.value === '') {\n      return setSearchParams({});\n    }\n    setQuery(evt.target.value.toLowerCase());\n    setSearchParams({ currentQuery: evt.target.value });\n  };\n\n  return (\n    <MovieForm onSubmit={handelSubmit}>\n      <MovieInput\n        type=\"text\"\n        placeholder=\"Search by name \"\n        value={query}\n        autoComplete=\"off\"\n        onChange={updateQueryString}\n      />\n      <button type=\"submit\" disabled={!query}>\n        <FaSearch style={{ width: 24, height: 24 }} />\n      </button>\n    </MovieForm>\n  );\n};\n\nexport default MoviesForm;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport SearchMovie from 'components/SearchMovie/SearchMovie';\nimport MoviesForm from 'components/MoviesForm/MoviesForm';\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const currentQuery = searchParams.get('query') ?? ' ';\n  const location = useLocation();\n  console.log({ currentQuery });\n\n  useEffect(() => {\n    const BASE_URL = 'https://api.themoviedb.org/3/';\n    const API_KEY = '91a00928249c8bc2bbd26dc9aa02f7be';\n    const getMovies = async () => {\n      const results = await fetch(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&&query=${currentQuery}&include_adult=false&language=en-US&page=1`\n      );\n      if (!results.ok) {\n        throw new Error('Smth went wrong');\n      }\n      return results.json();\n    };\n\n    const fetchMovies = async () => {\n      try {\n        const data = await getMovies(currentQuery);\n        console.log(data.results);\n        if (data.results.length === 0) {\n          throw Error('No matches found');\n        }\n        setMovies(data.results);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n\n    fetchMovies();\n  }, [currentQuery]);\n\n  console.log(error);\n  console.log(movies);\n  const visibleMovie = movies.filter(movie =>\n    movie.original_title.includes(currentQuery)\n  );\n  console.log(visibleMovie);\n  console.log(location);\n  return (\n    <div>\n      <MoviesForm setSearchParams={setSearchParams} />\n      <SearchMovie movies={movies} />\n    </div>\n  );\n};\nexport default Movies;\n"],"names":["movies","map","id","original_title","name","to","MovieInput","styled","MovieForm","setSearchParams","useState","query","setQuery","onSubmit","e","preventDefault","type","placeholder","value","autoComplete","onChange","evt","console","log","target","toLowerCase","currentQuery","disabled","style","width","height","setMovies","error","setError","useSearchParams","searchParams","get","location","useLocation","useEffect","getMovies","fetch","results","ok","Error","json","fetchMovies","data","length","message","visibleMovie","filter","movie","includes"],"sourceRoot":""}