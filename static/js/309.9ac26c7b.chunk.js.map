{"version":3,"file":"static/js/309.9ac26c7b.chunk.js","mappings":"qLAOA,E,OALuBA,EAAAA,EAAH,6D,SCMpB,EAPuB,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,eAAgBC,EAAW,EAAXA,KACxC,OACE,+BACE,SAAC,EAAD,UAAiBD,GAAkBC,KAGxC,C,2JCQD,EAboB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrB,OACE,wBACGA,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,eAAgBC,EAAvB,EAAuBA,KAAvB,OACV,yBACE,SAAC,KAAD,WACE,SAACI,EAAA,EAAD,CAAgBL,eAAgBA,EAAgBC,KAAMA,OAFjDG,EADC,KASjB,E,2BCZYE,EAAaP,EAAAA,EAAAA,MAAH,6LAUVQ,EAAYR,EAAAA,EAAAA,KAAH,kFC8EtB,EArFe,WAAO,IAAD,EAGnB,GAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAON,EAAP,KAAeO,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,EAAO,UAAGJ,EAAaK,IAAI,kBAApB,QAAkC,GAC/CC,QAAQC,IAAIH,IAEZI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAGAC,EAAS,mCAAG,8FAASV,EAAT,EAASA,QAAT,SACMW,MAAM,mDAAD,OAC0BX,EAD1B,8CAEzBK,GAHc,WACVO,EADU,QAKHC,GALG,sBAMR,IAAIC,MAAM,mBANF,gCAQTF,EAAQG,QARC,2CAAH,sDAWTC,EAAW,mCAAG,6GAEGN,EAAU,CAAEV,QAAAA,IAFf,UAEViB,EAFU,OAGhBf,QAAQC,IAAIc,EAAKL,SACW,IAAxBK,EAAKL,QAAQM,OAJD,sBAKRJ,MAAM,oBALE,OAOhBtB,EAAUyB,EAAKL,SAPC,kDAShBlB,EAAS,KAAMyB,SATC,0DAAH,qDAYjBH,GACD,GAAE,CAAChB,IASJE,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIV,GAcZ,OADAS,QAAQC,IAAIL,IAEV,4BACE,UAACR,EAAD,CAAW8B,SAfM,SAAAC,GACnBA,EAAEC,iBACqB,KAAnBtB,EAAQuB,QAIZ1B,EAAgBG,GAChBR,EAAU,KAJRgC,MAAM,wBAKT,EAOG,WACE,SAACnC,EAAD,CACEoC,KAAK,OACLC,YAAY,kBACZC,MAAO3B,EACP4B,SA7BkB,SAAAC,GAExB,GADA3B,QAAQC,IAAI0B,EAAIC,OAAOH,OACE,KAArBE,EAAIC,OAAOH,MACb,OAAO9B,EAAgB,CAAC,GAE1BA,EAAgB,CAAEG,QAAS6B,EAAIC,OAAOH,OACvC,KAyBK,mBAAQF,KAAK,SAAb,UACE,SAAC,MAAD,CAAUM,MAAO,CAAEC,MAAO,GAAIC,OAAQ,YAG1C,SAAC,EAAD,CAAahD,OAAQA,MAG1B,C","sources":["components/TrenMovieItem/TrendMovieItem.styled.jsx","components/TrenMovieItem/TrendMovieItem.jsx","components/SearchMovie/SearchMovie.jsx","pages/Movie.styled.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst TrendMovieLink = styled.p`\n  margin: 0;\n  margin-bottom: 5px;\n`;\n\nexport default TrendMovieLink;\n","import TrendMovieLink from './TrendMovieItem.styled';\nconst TrendMovieItem = ({ original_title, name }) => {\n  return (\n    <>\n      <TrendMovieLink>{original_title || name}</TrendMovieLink>\n    </>\n  );\n};\nexport default TrendMovieItem;\n","import TrendMovieItem from 'components/TrenMovieItem/TrendMovieItem';\nimport { Link } from 'react-router-dom';\nconst SearchMovie = ({ movies }) => {\n  return (\n    <ul>\n      {movies.map(({ id, original_title, name }) => (\n        <li key={id}>\n          <Link>\n            <TrendMovieItem original_title={original_title} name={name} />\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default SearchMovie;\n","import styled from '@emotion/styled';\n\nexport const MovieInput = styled.input`\n  display: inline-block;\n  width: 200px;\n  height: 27px;\n  margin-left: 40px;\n  font: inherit;\n  font-size: 14px;\n  padding-left: 4px;\n  padding-right: 4px;\n`;\nexport const MovieForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport SearchMovie from 'components/SearchMovie/SearchMovie';\nimport { FaSearch } from 'react-icons/fa';\nimport { MovieInput, MovieForm } from './Movie.styled';\nconst Movies = () => {\n  // const [movies, setMovies] = useState(['movie - 1', 'movie - 2', 'movie - 3']);\n\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const location = useLocation();\n  const movieId = searchParams.get('movieId') ?? '';\n  console.log(movieId);\n\n  useEffect(() => {\n    const options = {\n      method: 'GET',\n      headers: {\n        accept: 'application/json',\n        Authorization:\n          'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5MWEwMDkyODI0OWM4YmMyYmJkMjZkYzlhYTAyZjdiZSIsInN1YiI6IjY0ODcyNTQ3ZTI3MjYwMDE0N2JhZjQ3NSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.jrQFhg3zIzgrcOgT3KJMhk2fc76vvqhqSwZS0bI1EK4',\n      },\n    };\n    const getMovies = async ({ movieId }) => {\n      const results = await fetch(\n        `https://api.themoviedb.org/3/search/movie?query=${movieId}&include_adult=false&language=en-US&page=1`,\n        options\n      );\n      if (!results.ok) {\n        throw new Error('Smth went wrong');\n      }\n      return results.json();\n    };\n\n    const fetchMovies = async () => {\n      try {\n        const data = await getMovies({ movieId });\n        console.log(data.results);\n        if (data.results.length === 0) {\n          throw Error('No matches found');\n        }\n        setMovies(data.results);\n      } catch (error) {\n        setError(error.message);\n      }\n    };\n    fetchMovies();\n  }, [movieId]);\n\n  const updateQueryString = evt => {\n    console.log(evt.target.value);\n    if (evt.target.value === '') {\n      return setSearchParams({});\n    }\n    setSearchParams({ movieId: evt.target.value });\n  };\n  console.log(movies);\n  console.log(error);\n  const handelSubmit = e => {\n    e.preventDefault();\n    if (movieId.trim() === '') {\n      alert('Please enter the name');\n      return;\n    }\n    setSearchParams(movieId);\n    setMovies([]);\n  };\n  // const visibleMovie = results.filter(original_title =>\n  //   movie.includes(movieId)\n  // );\n  console.log(location);\n  return (\n    <div>\n      <MovieForm onSubmit={handelSubmit}>\n        <MovieInput\n          type=\"text\"\n          placeholder=\"Search by name \"\n          value={movieId}\n          onChange={updateQueryString}\n        />\n        <button type=\"submit\">\n          <FaSearch style={{ width: 24, height: 24 }} />\n        </button>\n      </MovieForm>\n      <SearchMovie movies={movies} />\n    </div>\n  );\n};\nexport default Movies;\n"],"names":["styled","original_title","name","movies","map","id","TrendMovieItem","MovieInput","MovieForm","useState","setMovies","error","setError","useSearchParams","searchParams","setSearchParams","location","useLocation","movieId","get","console","log","useEffect","options","method","headers","accept","Authorization","getMovies","fetch","results","ok","Error","json","fetchMovies","data","length","message","onSubmit","e","preventDefault","trim","alert","type","placeholder","value","onChange","evt","target","style","width","height"],"sourceRoot":""}